package server

import (
	"fmt"
	"log"
	"math/rand"
	"net"
	"sync"
	"time"

	"github.com/aiurchenko/cs-fake-server/internal/config"
)

var challengeNumber = int32(123456789)

type FakeServer struct {
	cfg     *config.ServerConfig
	players []Player
	mu      sync.RWMutex
}

func New(cfg *config.ServerConfig) *FakeServer {
	server := &FakeServer{
		cfg:     cfg,
		players: []Player{},
	}

	server.AddPlayer("ProPlayer", 5, 1234.5, 0.9) // –ø–æ—á—Ç–∏ –≤—Å–µ–≥–¥–∞ –ø–æ–ª—É—á–∞–µ—Ç
	server.AddPlayer("CasualJoe", 3, 456.7, 0.5)  // –∏–Ω–æ–≥–¥–∞
	server.AddPlayer("Bot_Dumb", 1, 789.0, 0.1)   // —Ä–µ–¥–∫–æ

	return server
}

func (s *FakeServer) Start() error {
	s.StartScoreUpdater()

	addr := net.UDPAddr{
		Port: s.cfg.Port,
		IP:   net.ParseIP("0.0.0.0"),
	}
	conn, err := net.ListenUDP("udp", &addr)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ UDP —Å–µ—Ä–≤–µ—Ä–∞: %w", err)
	}
	defer conn.Close()

	fmt.Printf("üõ∞Ô∏è  –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É %d\n", s.cfg.Port)

	for {
		buf := make([]byte, 1400)
		n, clientAddr, err := conn.ReadFromUDP(buf)
		if err != nil {
			fmt.Println("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è:", err)
			continue
		}
		if n < 5 {
			continue
		}
		s.handleRequest(buf[:n], clientAddr, conn)
	}
}

func (s *FakeServer) StartScoreUpdater() {
	go func() {
		for {
			wait := time.Duration(rand.Intn(26)+5) * time.Second
			log.Printf("‚è≥ –°–ª–µ–¥—É—é—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ %v...\n", wait)
			time.Sleep(wait)

			s.mu.Lock()
			if len(s.players) == 0 {
				log.Println("‚ö†Ô∏è –ù–µ—Ç –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
				s.mu.Unlock()
				continue
			}

			// 1. –°—É–º–º–∏—Ä—É–µ–º –≤—Å–µ –≤–µ—Å–∞ (Skill)
			var totalWeight float32
			for _, p := range s.players {
				// –ú–æ–∂–Ω–æ –¥–∞—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–µ—Å, —á—Ç–æ–±—ã 0.0 –Ω–µ –±—ã–ª–∏ –∞–±—Å–æ–ª—é—Ç–Ω–æ –∏—Å–∫–ª—é—á–µ–Ω—ã
				if p.Skill <= 0.0 {
					totalWeight += 0.01
				} else {
					totalWeight += p.Skill
				}
			}

			// 2. –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç 0 –¥–æ totalWeight
			target := rand.Float32() * totalWeight

			// 3. –ü—Ä–æ–±–µ–≥–∞–µ–º –ø–æ –∏–≥—Ä–æ–∫–∞–º –∏ –∏—â–µ–º, –∫—Ç–æ –ø–æ–ø–∞–ª
			var chosen *Player
			acc := float32(0)
			for i := range s.players {
				weight := s.players[i].Skill
				if weight <= 0 {
					weight = 0.01 // –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —à–∞–Ω—Å
				}
				acc += weight
				if target <= acc {
					chosen = &s.players[i]
					break
				}
			}

			if chosen != nil {
				chosen.Score += 1
				log.Printf("‚≠ê –í—ã–±—Ä–∞–Ω –∏–≥—Ä–æ–∫ %q (skill %.2f), —Ç–µ–ø–µ—Ä—å score: %d", chosen.Name, chosen.Skill, chosen.Score)
			} else {
				log.Println("‚ö†Ô∏è –ù–∏–∫—Ç–æ –Ω–µ –≤—ã–±—Ä–∞–Ω (—á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫)")
			}

			s.mu.Unlock()
		}
	}()
}
